<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo创建博客托管GitHub Pages完全指南</title>
    <link href="/2021/03/25/blog/"/>
    <url>/2021/03/25/blog/</url>
    
    <content type="html"><![CDATA[<p>本文介绍基于Hexo创建博客，托管到GitHub Pages。</p><p>主要功能有：</p><ul><li>用Hexo创建博客</li><li>使用<a href="https://pages.github.com/">GitHub Pages</a>托管博客</li><li>使用<a href="https://github.com/features/actions">GitHub Actions</a>自动部署博客<!-- - 自定义域名访问GitHub Pages托管的域名 --></li><li>为Hexo博客配置自适应主题<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></li><li>为Hexo博客配置无后端评论插件<a href="https://valine.js.org/">valine</a></li><li>为Hexo博客添加<a href="https://tongji.baidu.com/web/welcome/login">百度统计</a><!-- - 为Hexo博客添加[Google Analytics](https://analytics.google.com/analytics/web/) --></li></ul><h1 id="用Hexo创建并使用GitHub-Pages托管博客"><a href="#用Hexo创建并使用GitHub-Pages托管博客" class="headerlink" title="用Hexo创建并使用GitHub Pages托管博客"></a>用Hexo创建并使用GitHub Pages托管博客</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo基于Nodejs的博客框架，支持Markdown作为源文件，生成静态网页。</p><ul><li>安装git：前往<a href="https://git-scm.com/">git官网</a>下载对应操作系统版本完成安装。</li><li>安装Nodejs： 前往<a href="https://nodejs.org/en/">Nodejs官网</a>下载对应操作系统版本完成安装。</li><li>安装Hexo：命令行执行<code>npm install -g hexo-cli</code>如提示权限问题可以在命令前添加<code>sudo</code>。</li></ul><h2 id="创建博客项目文件"><a href="#创建博客项目文件" class="headerlink" title="创建博客项目文件"></a>创建博客项目文件</h2><p>Hexo安装完成后，命令行进入到要保存项目的目录，执行以下命令<code>hexo init maskzhao.github.io</code>（实际操作中用<code>&lt;username&gt;.github.io</code>替换<code>maskzhao.github.io</code>）：</p><h2 id="运行博客网站"><a href="#运行博客网站" class="headerlink" title="运行博客网站"></a>运行博客网站</h2><p>命令行进入博客目录，执行以下命令在本地启动服务器查看博客效果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">run</span> server<br></code></pre></td></tr></table></figure><p>博客启动后浏览器通过<code>http://localhost:4000</code>即可访问。</p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>执行<code>hexo new &lt;title&gt;</code>Hexo会使用默认layout在<code>source/_posts</code>下创建对应<code>.md</code>文档，刷新浏览器可以在文章列表看到新创建的文章，编辑后刷新文章详情可实时预览。</p><h2 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h2><p>修改<code>_config.yml</code>中的<code>public_dir: public</code>为<code>public_dir: docs</code>，后面配置GitHub Pages托管时只支持根目录或者docs目录，所以这里先修改。</p><p>执行<code>hexo generate</code>会根据系统配置编译生产静态html文件保存在<code>docs</code>文件夹下，将<code>docs</code>目录托管到服务器即可正常访问。</p><p>此时一个最简单的博客网站就生成了。后续逐步添加功能进行丰富。</p><h1 id="使用GitHub-Pages托管博客"><a href="#使用GitHub-Pages托管博客" class="headerlink" title="使用GitHub Pages托管博客"></a>使用GitHub Pages托管博客</h1><p>Github Pages可以托管用户或者项目网站，用户网站需要创建格式为<code>&lt;username&gt;.github.io</code>的仓库。然后指定网页托管的分支和目录。</p><ol><li>创建用户相关仓库<br>在github创建名为<a href="https://github.com/maskzhao/maskzhao.github.io">maskzhao.github.io</a>的仓库</li><li>本地编辑博客并提交<br>执行<code>hexo generate</code>后将项目文件推送到GitHub<code>master</code>分支。</li><li>设置GitHub Pages托管分支及目录<br>浏览器访问<a href="https://github.com/maskzhao/maskzhao.github.io">maskzhao.github.io</a>，点击<code>Settings</code>. 滚动到GitHub Pages区域，托管文件branch选择<code>master</code>, 托管目录选择<code>docs</code>并保存<br><img src="github-pages-setting.png"></li><li>访问博客<br>浏览器访问<a href="https://maskzhao.github.io/">https://maskzhao.github.io/</a></li></ol><h1 id="使用GitHub-Actions自动部署博客"><a href="#使用GitHub-Actions自动部署博客" class="headerlink" title="使用GitHub Actions自动部署博客"></a>使用GitHub Actions自动部署博客</h1><p>每次写完文章都执行<code>hexo generate</code>生成静态文件再推送到GitHub是很繁琐的。GitHub Actions可以实现CI/CD工作流制动完成编译、打包、部署等工作。下面我们通过GitHub Actions实现自动部署博客。</p><ol><li>在项目根目录创建<code>.github/workflows/pages.yml</code>填写内容如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span>  <span class="hljs-comment"># default branch</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">pages:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">12.</span><span class="hljs-string">x</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;12.x&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br>            <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./docs</span><br>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">gh-pages</span>  <span class="hljs-comment"># deploying branch</span><br></code></pre></td></tr></table></figure>GitHub Actions会在master有更新时执行<code>npm run build</code>并将成成的<code>docs</code>目录作为根目录推送到<code>gh-pages</code>分支<br><img src="github-actions-gh-pages.png"></li></ol><p>2.修改GitHub Pages配置，设置source为<code>gh-pages</code>分支的根目录。<br>3.修改博客文件，推送到GitHub仓库<code>master</code>分支，刷新页面查看是否更新。</p><!--# 自定义域名访问GitHub Pages托管的域名1.在GitHub Pages设置页"Custom domain（自定义域）"下，输入自定义域，然后单击 Save（保存）。 这将创建一个在发布源根目录中添加 CNAME 文件的提交。2.在DNS解析设置中创建CNAME记录，使子域指向您站点的默认域。 例如，如果要对您的用户站点使用子域 www.example.com，您可以创建 CNAME 记录，使 www.example.com 指向 <user>.github.io。 --><h1 id="配置fluid主题"><a href="#配置fluid主题" class="headerlink" title="配置fluid主题"></a>配置fluid主题</h1><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>是一款Material Design风格的主题，支持响应式。</p><p>1.获取主题最新版本<br>  Hexo 5.0.0以上版本，通过npm安装，在博客根目录执行以下命令<br>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><br>  然后在博客目录下创建<code> _config.fluid.yml</code>，将主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><p>2.修改hexo配置文件<code>_config.yml</code>主题配置<br>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure></p><p>3.重启本地服务，查看效果</p><h1 id="配置评论插件valine"><a href="#配置评论插件valine" class="headerlink" title="配置评论插件valine"></a>配置评论插件valine</h1><p><a href="https://valine.js.org/">valine</a>是一款快速、简洁且高效的无后端评论系统。fluid主题集成了对valine的支持，下面我们基于fluid来添加valine。</p><p>1.注册Leancloud账号并认证<br>  前往<a href="https://console.leancloud.cn/register">LeanCloud</a>官网注册账号，登录后完成身份认证、邮箱验证。</p><p>2.创建应用<br>  <img src="leancloud-create-app.png"></p><p>3.在<code>_config.fluid.yml</code>中开启评论并配置参数<br>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">xxxx</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">xxxx</span><br></code></pre></td></tr></table></figure><br>  其中的appid和appkey在<strong>应用-》设置-》应用keys</strong>页面查找</p><p>  配置完成后重启，文章底部出现评论区。</p><p>4.管理评论<br>  在LeanCloud后台，应用中点击<strong>存储 -&gt; 结构化数据</strong>，选择创建Class，名称Comment可以查看所有评论</p><!--todo： 配置阅读数 --><!-- todo: 配置waline --><!-- todo: hexo支持图片  --><h1 id="配置百度统计"><a href="#配置百度统计" class="headerlink" title="配置百度统计"></a>配置百度统计</h1><p>fluid主题支持百度统计配置，只需要在百度统计中创建网站，在配置文件中填写对应代码即可。</p><p>1.新增网站<br>  登录<a href="https://tongji.baidu.com/web/welcome/login">百度统计</a>，进入<strong>管理-》账户管理-》网站列表-》自有网站</strong>，点击<strong>新增网站</strong>填写网站信息。</p><p>2.配置秘钥<br>  在网站列表操作项中点击<strong>代码获取</strong>，复制<code>hm.src = &quot;https://hm.baidu.com/hm.js?xxxx&quot;;</code>中<code>.js?</code>后面的字符串，填写到<code>_config.fluid.yml</code>中，同时确保<code>web_analytics</code>的<code>enable</code>为<code>true</code><br>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">web_analytics</span>:<br>  <span class="hljs-attribute">enable</span>: true<br>  <span class="hljs-attribute">baidu</span>: <span class="hljs-number">209</span>ab<span class="hljs-number">21</span>******<span class="hljs-number">0</span>a<span class="hljs-number">5</span>fc<span class="hljs-number">7</span>fb<br></code></pre></td></tr></table></figure></p><p>3.检查安装<br>  推送博客源码到GitHub，部署完成后在百度统计后台<strong>管理-》代码管理-》代码安装检查</strong>确认已正确安装。</p><p>4.查看访客数据<br>  代码安装成功20分钟后百度统计后台即可查看访问信息。<br>  <img src="baidu-tongji.png"></p><h1 id="hexo常用功能"><a href="#hexo常用功能" class="headerlink" title="hexo常用功能"></a>hexo常用功能</h1><h2 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h2><p>资源是<code>source</code>文件夹下除了文章意外的所有文件，如图片、css、js等。项目通用图片可以放在<code>source/images</code>文件夹中。通过<code>![](/images/image.jpg)</code>引用。</p><h2 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h2><p>如果文章包含的图片比较多，通常把文字和资源单独保存更合理。在<code>config.yml</code>中设置<code>post_asset_folder: true</code>，使用<code>hexo new [layout] &lt;title&gt;</code>创建文章时，会创建同名文件夹。在该文件夹下保存的图片可以直接在文章中引用，如<code>![](hello.jpg)</code></p><h2 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h2><p>将图标保存到<code>source/images</code>目录下。如<code>avatar.jpg</code>，在<code>_config.fluid.yml</code>中配置<code>favicon: /images/avatar.jpg</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
